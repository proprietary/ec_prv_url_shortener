// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: url_shortener.proto

#include "url_shortener.grpc.pb.h"
#include "url_shortener.pb.h"

#include <functional>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/server_context.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/support/sync_stream.h>
namespace ec_prv {

static const char *UrlShortener_method_names[] = {
    "/ec_prv.UrlShortener/ShortenUrl",
    "/ec_prv.UrlShortener/LookupUrl",
};

std::unique_ptr<UrlShortener::Stub>
UrlShortener::NewStub(const std::shared_ptr<::grpc::ChannelInterface> &channel,
                      const ::grpc::StubOptions &options) {
  (void)options;
  std::unique_ptr<UrlShortener::Stub> stub(
      new UrlShortener::Stub(channel, options));
  return stub;
}

UrlShortener::Stub::Stub(
    const std::shared_ptr<::grpc::ChannelInterface> &channel,
    const ::grpc::StubOptions &options)
    : channel_(channel),
      rpcmethod_ShortenUrl_(UrlShortener_method_names[0],
                            options.suffix_for_stats(),
                            ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_LookupUrl_(UrlShortener_method_names[1],
                           options.suffix_for_stats(),
                           ::grpc::internal::RpcMethod::NORMAL_RPC, channel) {}

::grpc::Status
UrlShortener::Stub::ShortenUrl(::grpc::ClientContext *context,
                               const ::ec_prv::ShortenUrlRequest &request,
                               ::ec_prv::ShortenedUrlResponse *response) {
  return ::grpc::internal::BlockingUnaryCall<
      ::ec_prv::ShortenUrlRequest, ::ec_prv::ShortenedUrlResponse,
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      channel_.get(), rpcmethod_ShortenUrl_, context, request, response);
}

void UrlShortener::Stub::async::ShortenUrl(
    ::grpc::ClientContext *context, const ::ec_prv::ShortenUrlRequest *request,
    ::ec_prv::ShortenedUrlResponse *response,
    std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall<
      ::ec_prv::ShortenUrlRequest, ::ec_prv::ShortenedUrlResponse,
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      stub_->channel_.get(), stub_->rpcmethod_ShortenUrl_, context, request,
      response, std::move(f));
}

void UrlShortener::Stub::async::ShortenUrl(
    ::grpc::ClientContext *context, const ::ec_prv::ShortenUrlRequest *request,
    ::ec_prv::ShortenedUrlResponse *response,
    ::grpc::ClientUnaryReactor *reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create<
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      stub_->channel_.get(), stub_->rpcmethod_ShortenUrl_, context, request,
      response, reactor);
}

::grpc::ClientAsyncResponseReader<::ec_prv::ShortenedUrlResponse> *
UrlShortener::Stub::PrepareAsyncShortenUrlRaw(
    ::grpc::ClientContext *context, const ::ec_prv::ShortenUrlRequest &request,
    ::grpc::CompletionQueue *cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<
      ::ec_prv::ShortenedUrlResponse, ::ec_prv::ShortenUrlRequest,
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      channel_.get(), cq, rpcmethod_ShortenUrl_, context, request);
}

::grpc::ClientAsyncResponseReader<::ec_prv::ShortenedUrlResponse> *
UrlShortener::Stub::AsyncShortenUrlRaw(
    ::grpc::ClientContext *context, const ::ec_prv::ShortenUrlRequest &request,
    ::grpc::CompletionQueue *cq) {
  auto *result = this->PrepareAsyncShortenUrlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status
UrlShortener::Stub::LookupUrl(::grpc::ClientContext *context,
                              const ::ec_prv::UrlLookupRequest &request,
                              ::ec_prv::UrlLookupResponse *response) {
  return ::grpc::internal::BlockingUnaryCall<
      ::ec_prv::UrlLookupRequest, ::ec_prv::UrlLookupResponse,
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      channel_.get(), rpcmethod_LookupUrl_, context, request, response);
}

void UrlShortener::Stub::async::LookupUrl(
    ::grpc::ClientContext *context, const ::ec_prv::UrlLookupRequest *request,
    ::ec_prv::UrlLookupResponse *response,
    std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall<
      ::ec_prv::UrlLookupRequest, ::ec_prv::UrlLookupResponse,
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      stub_->channel_.get(), stub_->rpcmethod_LookupUrl_, context, request,
      response, std::move(f));
}

void UrlShortener::Stub::async::LookupUrl(
    ::grpc::ClientContext *context, const ::ec_prv::UrlLookupRequest *request,
    ::ec_prv::UrlLookupResponse *response,
    ::grpc::ClientUnaryReactor *reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create<
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      stub_->channel_.get(), stub_->rpcmethod_LookupUrl_, context, request,
      response, reactor);
}

::grpc::ClientAsyncResponseReader<::ec_prv::UrlLookupResponse> *
UrlShortener::Stub::PrepareAsyncLookupUrlRaw(
    ::grpc::ClientContext *context, const ::ec_prv::UrlLookupRequest &request,
    ::grpc::CompletionQueue *cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<
      ::ec_prv::UrlLookupResponse, ::ec_prv::UrlLookupRequest,
      ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
      channel_.get(), cq, rpcmethod_LookupUrl_, context, request);
}

::grpc::ClientAsyncResponseReader<::ec_prv::UrlLookupResponse> *
UrlShortener::Stub::AsyncLookupUrlRaw(::grpc::ClientContext *context,
                                      const ::ec_prv::UrlLookupRequest &request,
                                      ::grpc::CompletionQueue *cq) {
  auto *result = this->PrepareAsyncLookupUrlRaw(context, request, cq);
  result->StartCall();
  return result;
}

UrlShortener::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UrlShortener_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<
          UrlShortener::Service, ::ec_prv::ShortenUrlRequest,
          ::ec_prv::ShortenedUrlResponse, ::grpc::protobuf::MessageLite,
          ::grpc::protobuf::MessageLite>(
          [](UrlShortener::Service *service, ::grpc::ServerContext *ctx,
             const ::ec_prv::ShortenUrlRequest *req,
             ::ec_prv::ShortenedUrlResponse *resp) {
            return service->ShortenUrl(ctx, req, resp);
          },
          this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UrlShortener_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<
          UrlShortener::Service, ::ec_prv::UrlLookupRequest,
          ::ec_prv::UrlLookupResponse, ::grpc::protobuf::MessageLite,
          ::grpc::protobuf::MessageLite>(
          [](UrlShortener::Service *service, ::grpc::ServerContext *ctx,
             const ::ec_prv::UrlLookupRequest *req,
             ::ec_prv::UrlLookupResponse *resp) {
            return service->LookupUrl(ctx, req, resp);
          },
          this)));
}

UrlShortener::Service::~Service() {}

::grpc::Status
UrlShortener::Service::ShortenUrl(::grpc::ServerContext *context,
                                  const ::ec_prv::ShortenUrlRequest *request,
                                  ::ec_prv::ShortenedUrlResponse *response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status
UrlShortener::Service::LookupUrl(::grpc::ServerContext *context,
                                 const ::ec_prv::UrlLookupRequest *request,
                                 ::ec_prv::UrlLookupResponse *response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

} // namespace ec_prv
