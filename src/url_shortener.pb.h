// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: url_shortener.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_url_5fshortener_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_url_5fshortener_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_url_5fshortener_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_url_5fshortener_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_url_5fshortener_2eproto;
namespace ec_prv {
class ShortenUrlRequest;
struct ShortenUrlRequestDefaultTypeInternal;
extern ShortenUrlRequestDefaultTypeInternal _ShortenUrlRequest_default_instance_;
class ShortenedUrlResponse;
struct ShortenedUrlResponseDefaultTypeInternal;
extern ShortenedUrlResponseDefaultTypeInternal _ShortenedUrlResponse_default_instance_;
class UrlLookupRequest;
struct UrlLookupRequestDefaultTypeInternal;
extern UrlLookupRequestDefaultTypeInternal _UrlLookupRequest_default_instance_;
class UrlLookupResponse;
struct UrlLookupResponseDefaultTypeInternal;
extern UrlLookupResponseDefaultTypeInternal _UrlLookupResponse_default_instance_;
}  // namespace ec_prv
PROTOBUF_NAMESPACE_OPEN
template <>
::ec_prv::ShortenUrlRequest* Arena::CreateMaybeMessage<::ec_prv::ShortenUrlRequest>(Arena*);
template <>
::ec_prv::ShortenedUrlResponse* Arena::CreateMaybeMessage<::ec_prv::ShortenedUrlResponse>(Arena*);
template <>
::ec_prv::UrlLookupRequest* Arena::CreateMaybeMessage<::ec_prv::UrlLookupRequest>(Arena*);
template <>
::ec_prv::UrlLookupResponse* Arena::CreateMaybeMessage<::ec_prv::UrlLookupResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ec_prv {

// ===================================================================


// -------------------------------------------------------------------

class ShortenUrlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ec_prv.ShortenUrlRequest) */ {
 public:
  inline ShortenUrlRequest() : ShortenUrlRequest(nullptr) {}
  ~ShortenUrlRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ShortenUrlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShortenUrlRequest(const ShortenUrlRequest& from);
  ShortenUrlRequest(ShortenUrlRequest&& from) noexcept
    : ShortenUrlRequest() {
    *this = ::std::move(from);
  }

  inline ShortenUrlRequest& operator=(const ShortenUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShortenUrlRequest& operator=(ShortenUrlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShortenUrlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShortenUrlRequest* internal_default_instance() {
    return reinterpret_cast<const ShortenUrlRequest*>(
               &_ShortenUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ShortenUrlRequest& a, ShortenUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShortenUrlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShortenUrlRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShortenUrlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShortenUrlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShortenUrlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShortenUrlRequest& from) {
    ShortenUrlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShortenUrlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ec_prv.ShortenUrlRequest";
  }
  protected:
  explicit ShortenUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongUrlFieldNumber = 1,
  };
  // string long_url = 1;
  void clear_long_url() ;
  const std::string& long_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_long_url(Arg_&& arg, Args_... args);
  std::string* mutable_long_url();
  PROTOBUF_NODISCARD std::string* release_long_url();
  void set_allocated_long_url(std::string* ptr);

  private:
  const std::string& _internal_long_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_long_url(
      const std::string& value);
  std::string* _internal_mutable_long_url();

  public:
  // @@protoc_insertion_point(class_scope:ec_prv.ShortenUrlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_url_5fshortener_2eproto;
};// -------------------------------------------------------------------

class ShortenedUrlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ec_prv.ShortenedUrlResponse) */ {
 public:
  inline ShortenedUrlResponse() : ShortenedUrlResponse(nullptr) {}
  ~ShortenedUrlResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ShortenedUrlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShortenedUrlResponse(const ShortenedUrlResponse& from);
  ShortenedUrlResponse(ShortenedUrlResponse&& from) noexcept
    : ShortenedUrlResponse() {
    *this = ::std::move(from);
  }

  inline ShortenedUrlResponse& operator=(const ShortenedUrlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShortenedUrlResponse& operator=(ShortenedUrlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShortenedUrlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShortenedUrlResponse* internal_default_instance() {
    return reinterpret_cast<const ShortenedUrlResponse*>(
               &_ShortenedUrlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ShortenedUrlResponse& a, ShortenedUrlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShortenedUrlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShortenedUrlResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShortenedUrlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShortenedUrlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShortenedUrlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShortenedUrlResponse& from) {
    ShortenedUrlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShortenedUrlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ec_prv.ShortenedUrlResponse";
  }
  protected:
  explicit ShortenedUrlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShortUrlFieldNumber = 1,
    kLongUrlFieldNumber = 2,
  };
  // string short_url = 1;
  void clear_short_url() ;
  const std::string& short_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_short_url(Arg_&& arg, Args_... args);
  std::string* mutable_short_url();
  PROTOBUF_NODISCARD std::string* release_short_url();
  void set_allocated_short_url(std::string* ptr);

  private:
  const std::string& _internal_short_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_url(
      const std::string& value);
  std::string* _internal_mutable_short_url();

  public:
  // string long_url = 2;
  void clear_long_url() ;
  const std::string& long_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_long_url(Arg_&& arg, Args_... args);
  std::string* mutable_long_url();
  PROTOBUF_NODISCARD std::string* release_long_url();
  void set_allocated_long_url(std::string* ptr);

  private:
  const std::string& _internal_long_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_long_url(
      const std::string& value);
  std::string* _internal_mutable_long_url();

  public:
  // @@protoc_insertion_point(class_scope:ec_prv.ShortenedUrlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_url_5fshortener_2eproto;
};// -------------------------------------------------------------------

class UrlLookupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ec_prv.UrlLookupRequest) */ {
 public:
  inline UrlLookupRequest() : UrlLookupRequest(nullptr) {}
  ~UrlLookupRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UrlLookupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UrlLookupRequest(const UrlLookupRequest& from);
  UrlLookupRequest(UrlLookupRequest&& from) noexcept
    : UrlLookupRequest() {
    *this = ::std::move(from);
  }

  inline UrlLookupRequest& operator=(const UrlLookupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UrlLookupRequest& operator=(UrlLookupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UrlLookupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UrlLookupRequest* internal_default_instance() {
    return reinterpret_cast<const UrlLookupRequest*>(
               &_UrlLookupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UrlLookupRequest& a, UrlLookupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UrlLookupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UrlLookupRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UrlLookupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UrlLookupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UrlLookupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UrlLookupRequest& from) {
    UrlLookupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UrlLookupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ec_prv.UrlLookupRequest";
  }
  protected:
  explicit UrlLookupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShortUrlFieldNumber = 1,
  };
  // string short_url = 1;
  void clear_short_url() ;
  const std::string& short_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_short_url(Arg_&& arg, Args_... args);
  std::string* mutable_short_url();
  PROTOBUF_NODISCARD std::string* release_short_url();
  void set_allocated_short_url(std::string* ptr);

  private:
  const std::string& _internal_short_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_url(
      const std::string& value);
  std::string* _internal_mutable_short_url();

  public:
  // @@protoc_insertion_point(class_scope:ec_prv.UrlLookupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_url_5fshortener_2eproto;
};// -------------------------------------------------------------------

class UrlLookupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ec_prv.UrlLookupResponse) */ {
 public:
  inline UrlLookupResponse() : UrlLookupResponse(nullptr) {}
  ~UrlLookupResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UrlLookupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UrlLookupResponse(const UrlLookupResponse& from);
  UrlLookupResponse(UrlLookupResponse&& from) noexcept
    : UrlLookupResponse() {
    *this = ::std::move(from);
  }

  inline UrlLookupResponse& operator=(const UrlLookupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UrlLookupResponse& operator=(UrlLookupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UrlLookupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UrlLookupResponse* internal_default_instance() {
    return reinterpret_cast<const UrlLookupResponse*>(
               &_UrlLookupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UrlLookupResponse& a, UrlLookupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UrlLookupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UrlLookupResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UrlLookupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UrlLookupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UrlLookupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UrlLookupResponse& from) {
    UrlLookupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UrlLookupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ec_prv.UrlLookupResponse";
  }
  protected:
  explicit UrlLookupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShortUrlFieldNumber = 1,
    kLongUrlFieldNumber = 2,
  };
  // string short_url = 1;
  void clear_short_url() ;
  const std::string& short_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_short_url(Arg_&& arg, Args_... args);
  std::string* mutable_short_url();
  PROTOBUF_NODISCARD std::string* release_short_url();
  void set_allocated_short_url(std::string* ptr);

  private:
  const std::string& _internal_short_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_url(
      const std::string& value);
  std::string* _internal_mutable_short_url();

  public:
  // string long_url = 2;
  void clear_long_url() ;
  const std::string& long_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_long_url(Arg_&& arg, Args_... args);
  std::string* mutable_long_url();
  PROTOBUF_NODISCARD std::string* release_long_url();
  void set_allocated_long_url(std::string* ptr);

  private:
  const std::string& _internal_long_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_long_url(
      const std::string& value);
  std::string* _internal_mutable_long_url();

  public:
  // @@protoc_insertion_point(class_scope:ec_prv.UrlLookupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_url_5fshortener_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ShortenUrlRequest

// string long_url = 1;
inline void ShortenUrlRequest::clear_long_url() {
  _impl_.long_url_.ClearToEmpty();
}
inline const std::string& ShortenUrlRequest::long_url() const {
  // @@protoc_insertion_point(field_get:ec_prv.ShortenUrlRequest.long_url)
  return _internal_long_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShortenUrlRequest::set_long_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.long_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ec_prv.ShortenUrlRequest.long_url)
}
inline std::string* ShortenUrlRequest::mutable_long_url() {
  std::string* _s = _internal_mutable_long_url();
  // @@protoc_insertion_point(field_mutable:ec_prv.ShortenUrlRequest.long_url)
  return _s;
}
inline const std::string& ShortenUrlRequest::_internal_long_url() const {
  return _impl_.long_url_.Get();
}
inline void ShortenUrlRequest::_internal_set_long_url(const std::string& value) {
  ;


  _impl_.long_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ShortenUrlRequest::_internal_mutable_long_url() {
  ;
  return _impl_.long_url_.Mutable( GetArenaForAllocation());
}
inline std::string* ShortenUrlRequest::release_long_url() {
  // @@protoc_insertion_point(field_release:ec_prv.ShortenUrlRequest.long_url)
  return _impl_.long_url_.Release();
}
inline void ShortenUrlRequest::set_allocated_long_url(std::string* value) {
  _impl_.long_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.long_url_.IsDefault()) {
          _impl_.long_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ec_prv.ShortenUrlRequest.long_url)
}

// -------------------------------------------------------------------

// ShortenedUrlResponse

// string short_url = 1;
inline void ShortenedUrlResponse::clear_short_url() {
  _impl_.short_url_.ClearToEmpty();
}
inline const std::string& ShortenedUrlResponse::short_url() const {
  // @@protoc_insertion_point(field_get:ec_prv.ShortenedUrlResponse.short_url)
  return _internal_short_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShortenedUrlResponse::set_short_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.short_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ec_prv.ShortenedUrlResponse.short_url)
}
inline std::string* ShortenedUrlResponse::mutable_short_url() {
  std::string* _s = _internal_mutable_short_url();
  // @@protoc_insertion_point(field_mutable:ec_prv.ShortenedUrlResponse.short_url)
  return _s;
}
inline const std::string& ShortenedUrlResponse::_internal_short_url() const {
  return _impl_.short_url_.Get();
}
inline void ShortenedUrlResponse::_internal_set_short_url(const std::string& value) {
  ;


  _impl_.short_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ShortenedUrlResponse::_internal_mutable_short_url() {
  ;
  return _impl_.short_url_.Mutable( GetArenaForAllocation());
}
inline std::string* ShortenedUrlResponse::release_short_url() {
  // @@protoc_insertion_point(field_release:ec_prv.ShortenedUrlResponse.short_url)
  return _impl_.short_url_.Release();
}
inline void ShortenedUrlResponse::set_allocated_short_url(std::string* value) {
  _impl_.short_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.short_url_.IsDefault()) {
          _impl_.short_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ec_prv.ShortenedUrlResponse.short_url)
}

// string long_url = 2;
inline void ShortenedUrlResponse::clear_long_url() {
  _impl_.long_url_.ClearToEmpty();
}
inline const std::string& ShortenedUrlResponse::long_url() const {
  // @@protoc_insertion_point(field_get:ec_prv.ShortenedUrlResponse.long_url)
  return _internal_long_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShortenedUrlResponse::set_long_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.long_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ec_prv.ShortenedUrlResponse.long_url)
}
inline std::string* ShortenedUrlResponse::mutable_long_url() {
  std::string* _s = _internal_mutable_long_url();
  // @@protoc_insertion_point(field_mutable:ec_prv.ShortenedUrlResponse.long_url)
  return _s;
}
inline const std::string& ShortenedUrlResponse::_internal_long_url() const {
  return _impl_.long_url_.Get();
}
inline void ShortenedUrlResponse::_internal_set_long_url(const std::string& value) {
  ;


  _impl_.long_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ShortenedUrlResponse::_internal_mutable_long_url() {
  ;
  return _impl_.long_url_.Mutable( GetArenaForAllocation());
}
inline std::string* ShortenedUrlResponse::release_long_url() {
  // @@protoc_insertion_point(field_release:ec_prv.ShortenedUrlResponse.long_url)
  return _impl_.long_url_.Release();
}
inline void ShortenedUrlResponse::set_allocated_long_url(std::string* value) {
  _impl_.long_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.long_url_.IsDefault()) {
          _impl_.long_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ec_prv.ShortenedUrlResponse.long_url)
}

// -------------------------------------------------------------------

// UrlLookupRequest

// string short_url = 1;
inline void UrlLookupRequest::clear_short_url() {
  _impl_.short_url_.ClearToEmpty();
}
inline const std::string& UrlLookupRequest::short_url() const {
  // @@protoc_insertion_point(field_get:ec_prv.UrlLookupRequest.short_url)
  return _internal_short_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UrlLookupRequest::set_short_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.short_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ec_prv.UrlLookupRequest.short_url)
}
inline std::string* UrlLookupRequest::mutable_short_url() {
  std::string* _s = _internal_mutable_short_url();
  // @@protoc_insertion_point(field_mutable:ec_prv.UrlLookupRequest.short_url)
  return _s;
}
inline const std::string& UrlLookupRequest::_internal_short_url() const {
  return _impl_.short_url_.Get();
}
inline void UrlLookupRequest::_internal_set_short_url(const std::string& value) {
  ;


  _impl_.short_url_.Set(value, GetArenaForAllocation());
}
inline std::string* UrlLookupRequest::_internal_mutable_short_url() {
  ;
  return _impl_.short_url_.Mutable( GetArenaForAllocation());
}
inline std::string* UrlLookupRequest::release_short_url() {
  // @@protoc_insertion_point(field_release:ec_prv.UrlLookupRequest.short_url)
  return _impl_.short_url_.Release();
}
inline void UrlLookupRequest::set_allocated_short_url(std::string* value) {
  _impl_.short_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.short_url_.IsDefault()) {
          _impl_.short_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ec_prv.UrlLookupRequest.short_url)
}

// -------------------------------------------------------------------

// UrlLookupResponse

// string short_url = 1;
inline void UrlLookupResponse::clear_short_url() {
  _impl_.short_url_.ClearToEmpty();
}
inline const std::string& UrlLookupResponse::short_url() const {
  // @@protoc_insertion_point(field_get:ec_prv.UrlLookupResponse.short_url)
  return _internal_short_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UrlLookupResponse::set_short_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.short_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ec_prv.UrlLookupResponse.short_url)
}
inline std::string* UrlLookupResponse::mutable_short_url() {
  std::string* _s = _internal_mutable_short_url();
  // @@protoc_insertion_point(field_mutable:ec_prv.UrlLookupResponse.short_url)
  return _s;
}
inline const std::string& UrlLookupResponse::_internal_short_url() const {
  return _impl_.short_url_.Get();
}
inline void UrlLookupResponse::_internal_set_short_url(const std::string& value) {
  ;


  _impl_.short_url_.Set(value, GetArenaForAllocation());
}
inline std::string* UrlLookupResponse::_internal_mutable_short_url() {
  ;
  return _impl_.short_url_.Mutable( GetArenaForAllocation());
}
inline std::string* UrlLookupResponse::release_short_url() {
  // @@protoc_insertion_point(field_release:ec_prv.UrlLookupResponse.short_url)
  return _impl_.short_url_.Release();
}
inline void UrlLookupResponse::set_allocated_short_url(std::string* value) {
  _impl_.short_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.short_url_.IsDefault()) {
          _impl_.short_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ec_prv.UrlLookupResponse.short_url)
}

// string long_url = 2;
inline void UrlLookupResponse::clear_long_url() {
  _impl_.long_url_.ClearToEmpty();
}
inline const std::string& UrlLookupResponse::long_url() const {
  // @@protoc_insertion_point(field_get:ec_prv.UrlLookupResponse.long_url)
  return _internal_long_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UrlLookupResponse::set_long_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.long_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ec_prv.UrlLookupResponse.long_url)
}
inline std::string* UrlLookupResponse::mutable_long_url() {
  std::string* _s = _internal_mutable_long_url();
  // @@protoc_insertion_point(field_mutable:ec_prv.UrlLookupResponse.long_url)
  return _s;
}
inline const std::string& UrlLookupResponse::_internal_long_url() const {
  return _impl_.long_url_.Get();
}
inline void UrlLookupResponse::_internal_set_long_url(const std::string& value) {
  ;


  _impl_.long_url_.Set(value, GetArenaForAllocation());
}
inline std::string* UrlLookupResponse::_internal_mutable_long_url() {
  ;
  return _impl_.long_url_.Mutable( GetArenaForAllocation());
}
inline std::string* UrlLookupResponse::release_long_url() {
  // @@protoc_insertion_point(field_release:ec_prv.UrlLookupResponse.long_url)
  return _impl_.long_url_.Release();
}
inline void UrlLookupResponse::set_allocated_long_url(std::string* value) {
  _impl_.long_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.long_url_.IsDefault()) {
          _impl_.long_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ec_prv.UrlLookupResponse.long_url)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ec_prv


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_url_5fshortener_2eproto_2epb_2eh
