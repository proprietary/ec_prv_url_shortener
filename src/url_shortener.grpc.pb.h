// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: url_shortener.proto
#ifndef GRPC_url_5fshortener_2eproto__INCLUDED
#define GRPC_url_5fshortener_2eproto__INCLUDED

#include "url_shortener.pb.h"

#include <functional>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/server_context.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ec_prv {

class UrlShortener final {
public:
  static constexpr char const *service_full_name() {
    return "ec_prv.UrlShortener";
  }
  class StubInterface {
  public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status
    ShortenUrl(::grpc::ClientContext *context,
               const ::ec_prv::ShortenUrlRequest &request,
               ::ec_prv::ShortenedUrlResponse *response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::ec_prv::ShortenedUrlResponse>>
    AsyncShortenUrl(::grpc::ClientContext *context,
                    const ::ec_prv::ShortenUrlRequest &request,
                    ::grpc::CompletionQueue *cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::ec_prv::ShortenedUrlResponse>>(
          AsyncShortenUrlRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
        ::ec_prv::ShortenedUrlResponse>>
    PrepareAsyncShortenUrl(::grpc::ClientContext *context,
                           const ::ec_prv::ShortenUrlRequest &request,
                           ::grpc::CompletionQueue *cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::ec_prv::ShortenedUrlResponse>>(
          PrepareAsyncShortenUrlRaw(context, request, cq));
    }
    virtual ::grpc::Status LookupUrl(::grpc::ClientContext *context,
                                     const ::ec_prv::UrlLookupRequest &request,
                                     ::ec_prv::UrlLookupResponse *response) = 0;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::ec_prv::UrlLookupResponse>>
    AsyncLookupUrl(::grpc::ClientContext *context,
                   const ::ec_prv::UrlLookupRequest &request,
                   ::grpc::CompletionQueue *cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::ec_prv::UrlLookupResponse>>(
          AsyncLookupUrlRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::ec_prv::UrlLookupResponse>>
    PrepareAsyncLookupUrl(::grpc::ClientContext *context,
                          const ::ec_prv::UrlLookupRequest &request,
                          ::grpc::CompletionQueue *cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::ec_prv::UrlLookupResponse>>(
          PrepareAsyncLookupUrlRaw(context, request, cq));
    }
    class async_interface {
    public:
      virtual ~async_interface() {}
      virtual void ShortenUrl(::grpc::ClientContext *context,
                              const ::ec_prv::ShortenUrlRequest *request,
                              ::ec_prv::ShortenedUrlResponse *response,
                              std::function<void(::grpc::Status)>) = 0;
      virtual void ShortenUrl(::grpc::ClientContext *context,
                              const ::ec_prv::ShortenUrlRequest *request,
                              ::ec_prv::ShortenedUrlResponse *response,
                              ::grpc::ClientUnaryReactor *reactor) = 0;
      virtual void LookupUrl(::grpc::ClientContext *context,
                             const ::ec_prv::UrlLookupRequest *request,
                             ::ec_prv::UrlLookupResponse *response,
                             std::function<void(::grpc::Status)>) = 0;
      virtual void LookupUrl(::grpc::ClientContext *context,
                             const ::ec_prv::UrlLookupRequest *request,
                             ::ec_prv::UrlLookupResponse *response,
                             ::grpc::ClientUnaryReactor *reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface *async() { return nullptr; }
    class async_interface *experimental_async() {
      return async();
    }

  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::ec_prv::ShortenedUrlResponse> *
    AsyncShortenUrlRaw(::grpc::ClientContext *context,
                       const ::ec_prv::ShortenUrlRequest &request,
                       ::grpc::CompletionQueue *cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::ec_prv::ShortenedUrlResponse> *
    PrepareAsyncShortenUrlRaw(::grpc::ClientContext *context,
                              const ::ec_prv::ShortenUrlRequest &request,
                              ::grpc::CompletionQueue *cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::ec_prv::UrlLookupResponse> *
    AsyncLookupUrlRaw(::grpc::ClientContext *context,
                      const ::ec_prv::UrlLookupRequest &request,
                      ::grpc::CompletionQueue *cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::ec_prv::UrlLookupResponse> *
    PrepareAsyncLookupUrlRaw(::grpc::ClientContext *context,
                             const ::ec_prv::UrlLookupRequest &request,
                             ::grpc::CompletionQueue *cq) = 0;
  };
  class Stub final : public StubInterface {
  public:
    Stub(const std::shared_ptr<::grpc::ChannelInterface> &channel,
         const ::grpc::StubOptions &options = ::grpc::StubOptions());
    ::grpc::Status
    ShortenUrl(::grpc::ClientContext *context,
               const ::ec_prv::ShortenUrlRequest &request,
               ::ec_prv::ShortenedUrlResponse *response) override;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReader<::ec_prv::ShortenedUrlResponse>>
    AsyncShortenUrl(::grpc::ClientContext *context,
                    const ::ec_prv::ShortenUrlRequest &request,
                    ::grpc::CompletionQueue *cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::ec_prv::ShortenedUrlResponse>>(
          AsyncShortenUrlRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReader<::ec_prv::ShortenedUrlResponse>>
    PrepareAsyncShortenUrl(::grpc::ClientContext *context,
                           const ::ec_prv::ShortenUrlRequest &request,
                           ::grpc::CompletionQueue *cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::ec_prv::ShortenedUrlResponse>>(
          PrepareAsyncShortenUrlRaw(context, request, cq));
    }
    ::grpc::Status LookupUrl(::grpc::ClientContext *context,
                             const ::ec_prv::UrlLookupRequest &request,
                             ::ec_prv::UrlLookupResponse *response) override;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReader<::ec_prv::UrlLookupResponse>>
    AsyncLookupUrl(::grpc::ClientContext *context,
                   const ::ec_prv::UrlLookupRequest &request,
                   ::grpc::CompletionQueue *cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::ec_prv::UrlLookupResponse>>(
          AsyncLookupUrlRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReader<::ec_prv::UrlLookupResponse>>
    PrepareAsyncLookupUrl(::grpc::ClientContext *context,
                          const ::ec_prv::UrlLookupRequest &request,
                          ::grpc::CompletionQueue *cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::ec_prv::UrlLookupResponse>>(
          PrepareAsyncLookupUrlRaw(context, request, cq));
    }
    class async final : public StubInterface::async_interface {
    public:
      void ShortenUrl(::grpc::ClientContext *context,
                      const ::ec_prv::ShortenUrlRequest *request,
                      ::ec_prv::ShortenedUrlResponse *response,
                      std::function<void(::grpc::Status)>) override;
      void ShortenUrl(::grpc::ClientContext *context,
                      const ::ec_prv::ShortenUrlRequest *request,
                      ::ec_prv::ShortenedUrlResponse *response,
                      ::grpc::ClientUnaryReactor *reactor) override;
      void LookupUrl(::grpc::ClientContext *context,
                     const ::ec_prv::UrlLookupRequest *request,
                     ::ec_prv::UrlLookupResponse *response,
                     std::function<void(::grpc::Status)>) override;
      void LookupUrl(::grpc::ClientContext *context,
                     const ::ec_prv::UrlLookupRequest *request,
                     ::ec_prv::UrlLookupResponse *response,
                     ::grpc::ClientUnaryReactor *reactor) override;

    private:
      friend class Stub;
      explicit async(Stub *stub) : stub_(stub) {}
      Stub *stub() { return stub_; }
      Stub *stub_;
    };
    class async *async() override {
      return &async_stub_;
    }

  private:
    std::shared_ptr<::grpc::ChannelInterface> channel_;
    class async async_stub_ {
      this
    };
    ::grpc::ClientAsyncResponseReader<::ec_prv::ShortenedUrlResponse> *
    AsyncShortenUrlRaw(::grpc::ClientContext *context,
                       const ::ec_prv::ShortenUrlRequest &request,
                       ::grpc::CompletionQueue *cq) override;
    ::grpc::ClientAsyncResponseReader<::ec_prv::ShortenedUrlResponse> *
    PrepareAsyncShortenUrlRaw(::grpc::ClientContext *context,
                              const ::ec_prv::ShortenUrlRequest &request,
                              ::grpc::CompletionQueue *cq) override;
    ::grpc::ClientAsyncResponseReader<::ec_prv::UrlLookupResponse> *
    AsyncLookupUrlRaw(::grpc::ClientContext *context,
                      const ::ec_prv::UrlLookupRequest &request,
                      ::grpc::CompletionQueue *cq) override;
    ::grpc::ClientAsyncResponseReader<::ec_prv::UrlLookupResponse> *
    PrepareAsyncLookupUrlRaw(::grpc::ClientContext *context,
                             const ::ec_prv::UrlLookupRequest &request,
                             ::grpc::CompletionQueue *cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ShortenUrl_;
    const ::grpc::internal::RpcMethod rpcmethod_LookupUrl_;
  };
  static std::unique_ptr<Stub>
  NewStub(const std::shared_ptr<::grpc::ChannelInterface> &channel,
          const ::grpc::StubOptions &options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
  public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status
    ShortenUrl(::grpc::ServerContext *context,
               const ::ec_prv::ShortenUrlRequest *request,
               ::ec_prv::ShortenedUrlResponse *response);
    virtual ::grpc::Status LookupUrl(::grpc::ServerContext *context,
                                     const ::ec_prv::UrlLookupRequest *request,
                                     ::ec_prv::UrlLookupResponse *response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ShortenUrl : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

  public:
    WithAsyncMethod_ShortenUrl() { ::grpc::Service::MarkMethodAsync(0); }
    ~WithAsyncMethod_ShortenUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    ShortenUrl(::grpc::ServerContext * /*context*/,
               const ::ec_prv::ShortenUrlRequest * /*request*/,
               ::ec_prv::ShortenedUrlResponse * /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShortenUrl(
        ::grpc::ServerContext *context, ::ec_prv::ShortenUrlRequest *request,
        ::grpc::ServerAsyncResponseWriter<::ec_prv::ShortenedUrlResponse>
            *response,
        ::grpc::CompletionQueue *new_call_cq,
        ::grpc::ServerCompletionQueue *notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LookupUrl : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

  public:
    WithAsyncMethod_LookupUrl() { ::grpc::Service::MarkMethodAsync(1); }
    ~WithAsyncMethod_LookupUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    LookupUrl(::grpc::ServerContext * /*context*/,
              const ::ec_prv::UrlLookupRequest * /*request*/,
              ::ec_prv::UrlLookupResponse * /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLookupUrl(
        ::grpc::ServerContext *context, ::ec_prv::UrlLookupRequest *request,
        ::grpc::ServerAsyncResponseWriter<::ec_prv::UrlLookupResponse>
            *response,
        ::grpc::CompletionQueue *new_call_cq,
        ::grpc::ServerCompletionQueue *notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ShortenUrl<WithAsyncMethod_LookupUrl<Service>>
      AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ShortenUrl : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

  public:
    WithCallbackMethod_ShortenUrl() {
      ::grpc::Service::MarkMethodCallback(
          0, new ::grpc::internal::CallbackUnaryHandler<
                 ::ec_prv::ShortenUrlRequest, ::ec_prv::ShortenedUrlResponse>(
                 [this](::grpc::CallbackServerContext *context,
                        const ::ec_prv::ShortenUrlRequest *request,
                        ::ec_prv::ShortenedUrlResponse *response) {
                   return this->ShortenUrl(context, request, response);
                 }));
    }
    void SetMessageAllocatorFor_ShortenUrl(
        ::grpc::MessageAllocator<::ec_prv::ShortenUrlRequest,
                                 ::ec_prv::ShortenedUrlResponse> *allocator) {
      ::grpc::internal::MethodHandler *const handler =
          ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler<
          ::ec_prv::ShortenUrlRequest, ::ec_prv::ShortenedUrlResponse> *>(
          handler)
          ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ShortenUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    ShortenUrl(::grpc::ServerContext * /*context*/,
               const ::ec_prv::ShortenUrlRequest * /*request*/,
               ::ec_prv::ShortenedUrlResponse * /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor *
    ShortenUrl(::grpc::CallbackServerContext * /*context*/,
               const ::ec_prv::ShortenUrlRequest * /*request*/,
               ::ec_prv::ShortenedUrlResponse * /*response*/) {
      return nullptr;
    }
  };
  template <class BaseClass>
  class WithCallbackMethod_LookupUrl : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

  public:
    WithCallbackMethod_LookupUrl() {
      ::grpc::Service::MarkMethodCallback(
          1, new ::grpc::internal::CallbackUnaryHandler<
                 ::ec_prv::UrlLookupRequest, ::ec_prv::UrlLookupResponse>(
                 [this](::grpc::CallbackServerContext *context,
                        const ::ec_prv::UrlLookupRequest *request,
                        ::ec_prv::UrlLookupResponse *response) {
                   return this->LookupUrl(context, request, response);
                 }));
    }
    void SetMessageAllocatorFor_LookupUrl(
        ::grpc::MessageAllocator<::ec_prv::UrlLookupRequest,
                                 ::ec_prv::UrlLookupResponse> *allocator) {
      ::grpc::internal::MethodHandler *const handler =
          ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler<
          ::ec_prv::UrlLookupRequest, ::ec_prv::UrlLookupResponse> *>(handler)
          ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LookupUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    LookupUrl(::grpc::ServerContext * /*context*/,
              const ::ec_prv::UrlLookupRequest * /*request*/,
              ::ec_prv::UrlLookupResponse * /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor *
    LookupUrl(::grpc::CallbackServerContext * /*context*/,
              const ::ec_prv::UrlLookupRequest * /*request*/,
              ::ec_prv::UrlLookupResponse * /*response*/) {
      return nullptr;
    }
  };
  typedef WithCallbackMethod_ShortenUrl<WithCallbackMethod_LookupUrl<Service>>
      CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ShortenUrl : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

  public:
    WithGenericMethod_ShortenUrl() { ::grpc::Service::MarkMethodGeneric(0); }
    ~WithGenericMethod_ShortenUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    ShortenUrl(::grpc::ServerContext * /*context*/,
               const ::ec_prv::ShortenUrlRequest * /*request*/,
               ::ec_prv::ShortenedUrlResponse * /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LookupUrl : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

  public:
    WithGenericMethod_LookupUrl() { ::grpc::Service::MarkMethodGeneric(1); }
    ~WithGenericMethod_LookupUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    LookupUrl(::grpc::ServerContext * /*context*/,
              const ::ec_prv::UrlLookupRequest * /*request*/,
              ::ec_prv::UrlLookupResponse * /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass> class WithRawMethod_ShortenUrl : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

  public:
    WithRawMethod_ShortenUrl() { ::grpc::Service::MarkMethodRaw(0); }
    ~WithRawMethod_ShortenUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    ShortenUrl(::grpc::ServerContext * /*context*/,
               const ::ec_prv::ShortenUrlRequest * /*request*/,
               ::ec_prv::ShortenedUrlResponse * /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShortenUrl(
        ::grpc::ServerContext *context, ::grpc::ByteBuffer *request,
        ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer> *response,
        ::grpc::CompletionQueue *new_call_cq,
        ::grpc::ServerCompletionQueue *notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass> class WithRawMethod_LookupUrl : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

  public:
    WithRawMethod_LookupUrl() { ::grpc::Service::MarkMethodRaw(1); }
    ~WithRawMethod_LookupUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    LookupUrl(::grpc::ServerContext * /*context*/,
              const ::ec_prv::UrlLookupRequest * /*request*/,
              ::ec_prv::UrlLookupResponse * /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLookupUrl(
        ::grpc::ServerContext *context, ::grpc::ByteBuffer *request,
        ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer> *response,
        ::grpc::CompletionQueue *new_call_cq,
        ::grpc::ServerCompletionQueue *notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ShortenUrl : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

  public:
    WithRawCallbackMethod_ShortenUrl() {
      ::grpc::Service::MarkMethodRawCallback(
          0, new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer,
                                                        ::grpc::ByteBuffer>(
                 [this](::grpc::CallbackServerContext *context,
                        const ::grpc::ByteBuffer *request,
                        ::grpc::ByteBuffer *response) {
                   return this->ShortenUrl(context, request, response);
                 }));
    }
    ~WithRawCallbackMethod_ShortenUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    ShortenUrl(::grpc::ServerContext * /*context*/,
               const ::ec_prv::ShortenUrlRequest * /*request*/,
               ::ec_prv::ShortenedUrlResponse * /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor *
    ShortenUrl(::grpc::CallbackServerContext * /*context*/,
               const ::grpc::ByteBuffer * /*request*/,
               ::grpc::ByteBuffer * /*response*/) {
      return nullptr;
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LookupUrl : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

  public:
    WithRawCallbackMethod_LookupUrl() {
      ::grpc::Service::MarkMethodRawCallback(
          1, new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer,
                                                        ::grpc::ByteBuffer>(
                 [this](::grpc::CallbackServerContext *context,
                        const ::grpc::ByteBuffer *request,
                        ::grpc::ByteBuffer *response) {
                   return this->LookupUrl(context, request, response);
                 }));
    }
    ~WithRawCallbackMethod_LookupUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    LookupUrl(::grpc::ServerContext * /*context*/,
              const ::ec_prv::UrlLookupRequest * /*request*/,
              ::ec_prv::UrlLookupResponse * /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor *
    LookupUrl(::grpc::CallbackServerContext * /*context*/,
              const ::grpc::ByteBuffer * /*request*/,
              ::grpc::ByteBuffer * /*response*/) {
      return nullptr;
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShortenUrl : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

  public:
    WithStreamedUnaryMethod_ShortenUrl() {
      ::grpc::Service::MarkMethodStreamed(
          0,
          new ::grpc::internal::StreamedUnaryHandler<
              ::ec_prv::ShortenUrlRequest, ::ec_prv::ShortenedUrlResponse>(
              [this](::grpc::ServerContext *context,
                     ::grpc::ServerUnaryStreamer<::ec_prv::ShortenUrlRequest,
                                                 ::ec_prv::ShortenedUrlResponse>
                         *streamer) {
                return this->StreamedShortenUrl(context, streamer);
              }));
    }
    ~WithStreamedUnaryMethod_ShortenUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status
    ShortenUrl(::grpc::ServerContext * /*context*/,
               const ::ec_prv::ShortenUrlRequest * /*request*/,
               ::ec_prv::ShortenedUrlResponse * /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShortenUrl(
        ::grpc::ServerContext *context,
        ::grpc::ServerUnaryStreamer<::ec_prv::ShortenUrlRequest,
                                    ::ec_prv::ShortenedUrlResponse>
            *server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LookupUrl : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

  public:
    WithStreamedUnaryMethod_LookupUrl() {
      ::grpc::Service::MarkMethodStreamed(
          1, new ::grpc::internal::StreamedUnaryHandler<
                 ::ec_prv::UrlLookupRequest, ::ec_prv::UrlLookupResponse>(
                 [this](::grpc::ServerContext *context,
                        ::grpc::ServerUnaryStreamer<::ec_prv::UrlLookupRequest,
                                                    ::ec_prv::UrlLookupResponse>
                            *streamer) {
                   return this->StreamedLookupUrl(context, streamer);
                 }));
    }
    ~WithStreamedUnaryMethod_LookupUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status
    LookupUrl(::grpc::ServerContext * /*context*/,
              const ::ec_prv::UrlLookupRequest * /*request*/,
              ::ec_prv::UrlLookupResponse * /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status
    StreamedLookupUrl(::grpc::ServerContext *context,
                      ::grpc::ServerUnaryStreamer<::ec_prv::UrlLookupRequest,
                                                  ::ec_prv::UrlLookupResponse>
                          *server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ShortenUrl<
      WithStreamedUnaryMethod_LookupUrl<Service>>
      StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ShortenUrl<
      WithStreamedUnaryMethod_LookupUrl<Service>>
      StreamedService;
};

} // namespace ec_prv

#endif // GRPC_url_5fshortener_2eproto__INCLUDED
